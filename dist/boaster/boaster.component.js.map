{"version":3,"sources":["../../boaster/boaster.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAiB,MAAM,eAAA,CAAgB;AAChD,OAAO,EAAA,cAAE,EAAc,MAAM,mBAAA,CAAoB;AAEjD,OAAO,EAAA,OAAE,EAAQ,KAAA,EAAO,KAAA,EAAO,UAAA,EAAY,OAAA,EAAQ,MAAM,qBAAA,CAAsB;AAI/E;IAEI;;OAEG;IAEH,0BAAmB,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;IAC7C,CAAC;IAED,mCAAQ,GAAR;IAEA,CAAC;IAED;;;OAGG;IAEH,kCAAO,GAAP,UAAQ,GAAa;QACjB,sDAAsD;QACtD,EAAE,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC;IACL,CAAC;IAwCL,uBAAC;AAAD,CA/DA,AA+DC;;AAtCM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,+HAA+H;oBACzI,uHAAuH;oBACvH,oCAAoC;oBACpC,4EAA4E;oBAC5E,uDAAuD;oBACvD,qBAAqB;oBACrB,wFAAwF;oBACxF,uBAAuB;oBACvB,cAAc;oBACd,QAAQ;gBACR,MAAM,EAAE,EAAE;gBACV,UAAU,EAAE;oBACR,OAAO,CAAC,UAAU,EAAE;wBAChB,UAAU,CAAC,QAAQ,EAAE;4BACjB,KAAK,CAAC,EAAC,SAAS,EAAE,kBAAkB,EAAC,CAAC;4BACtC,OAAO,CAAC,GAAG,CAAC;yBACf,CAAC;wBACF,UAAU,CAAC,QAAQ,EAAE;4BACjB,KAAK,CAAC;gCACF,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;oCACvB,SAAS,EAAE,mBAAmB;iCACjC,CAAC,CAAC;gCACH,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC;oCAC5B,OAAO,EAAE,CAAC;iCACb,CAAC,CAAC;6BACN,CAAC;yBACL,CAAC;qBACL,CAAC;iBACL;aACJ,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,EAF6F,CAE7F,CAAC","file":"boaster.component.js","sourceRoot":"","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {BoasterService} from './boaster.service';\nimport {ToastMsg} from '../model/toast-msg';\nimport {animate, group, style, transition, trigger} from '@angular/animations';\n\n\n\nexport class BoasterComponent implements OnInit {\n\n    /**\n     * ToastComponent is always shown and used to show Toast Notifications, when the app calls ToastService from anywhere.\n     */\n\n    constructor(public boasterSrv: BoasterService) {\n    }\n\n    ngOnInit() {\n\n    }\n\n    /**\n     * dismiss given Toast Message\n     * @param msg ToastMessage\n     */\n\n    dismiss(msg: ToastMsg): void {\n        // Some Messages must be dismissed by clicking on them\n        if (msg.userMustDismiss) {\n            this.boasterSrv.deleteMessage(msg);\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'app-toast',\n    template: '<div class=\"alert-container alert-position-{{boasterSrv.config.vertical}} alert-position-{{boasterSrv.config.horizontal}}\">\\n' +\n    '    <div [@itemAnim] class=\"alert alert-{{msg.msgType}}\" *ngFor=\"let msg of boasterSrv.getMessages();\" role=\"alert\"\\n' +\n    '         (click)=\"dismiss(msg)\">\\n' +\n    '        <button *ngIf=\"msg.userMustDismiss\" type=\"button\" class=\"close\">\\n' +\n    '            <span aria-hidden=\"true\">&times;</span>\\n' +\n    '        </button>\\n' +\n    '        <div class=\"toast-icon\"><img src=\"./assets/images/appguard-v2.1.png\"/></div>\\n' +\n    '        {{msg.msg}}\\n' +\n    '    </div>\\n' +\n    '</div>',\n    styles: [],\n    animations: [\n        trigger('itemAnim', [\n            transition(':enter', [\n                style({transform: 'translateY(50px)'}),\n                animate(350)\n            ]),\n            transition(':leave', [\n                group([\n                    animate('0.5s ease', style({\n                        transform: 'translateY(-10px)'\n                    })),\n                    animate('0.5s 0.2s ease', style({\n                        opacity: 0\n                    }))\n                ])\n            ])\n        ])\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BoasterService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}