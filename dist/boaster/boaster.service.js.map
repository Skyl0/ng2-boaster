{"version":3,"sources":["../../boaster/boaster.service.ts"],"names":[],"mappings":"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","file":"boaster.service.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\nimport {ToastMsg} from '../model/toast-msg';\nimport {ToastConfig} from '../model/toast-config';\n\ndeclare var Notification: any;\ndeclare var document: any;\n\n\nexport class BoasterService {\n\n    /**\n     * This is the Core of the Toasts, managing the currently shown Toasts and providing methods for other components\n     * to call on to show Toasts in different styles.\n     */\n\n        // Array of the currently shown Toast Messages. Usually is empty.\n    messages: ToastMsg[] = [];\n    // The Config used, for position.\n    config: ToastConfig;\n    // Timeout after which the non-dismissable Toasts are hidden.\n    timeout = 3000;\n    notificationsAllowed = false;\n\n    constructor() {\n\n        // Create a basic Config, to show in top and right, and use WebAPI Notifications as callback, if the app is currently\n        // not the focus in the browser (e.g. User browsing in another Tab)\n        this.config = new ToastConfig('top', 'right', true);\n\n    }\n\n    showToast(text: string, type: string, userMustDismiss: boolean): void {\n        // Most used form of showing a Toast. User can specify the text, color (via Alert Type from Bootstrap) and\n        // if the User must dismiss it via clicking.\n        if (!document.hidden) {\n            // Normal Case, show the Toast Msg by adding it to the Array\n            this.addMessage(new ToastMsg(text, type, userMustDismiss));\n        } else if (this.notificationsAllowed) {\n            // if Notifications are allowed and document is hidden, show it via the WebAPI Notifications\n            this.spawnNotification(text, '../../assets/iconset/png/045-idea.png', text);\n        }\n    }\n\n    showDelayedToast(text: string, type: string, userMustDismiss: boolean, delay: number): void {\n        // same as showToast but with configurable delay.\n        this.wait(delay).then(() => {\n            this.showToast(text, type, userMustDismiss);\n        });\n    }\n\n    getMessages(): ToastMsg[] {\n        // return the Array of messages, for viewing them\n        return this.messages;\n    }\n\n    private spawnNotification(body: string, icon: string, title: string): void {\n        // WebAPI Notifications\n        let options = {\n            body: body,\n            icon: icon\n        };\n        let n = new Notification(title, options);\n        // Show for given time\n        setTimeout(n.close.bind(n), this.timeout);\n    }\n\n    private addMessage(msg: ToastMsg): void {\n        // A new Toast is received and will be added to the array.\n        this.messages.push(msg);\n        if (!msg.userMustDismiss) {\n            // When its a normal Toast, without the users action needed, remove it after given time\n            this.wait(this.timeout).then(() => {\n                this.deleteMessage(msg)\n            });\n        }\n    }\n\n    deleteMessage(msg: ToastMsg) {\n        // find the message and remove it from the array.\n        const index = this.messages.indexOf(msg);\n        if (index > -1) {\n            this.messages.splice(index, 1);\n        }\n    }\n\n    wait(time: number): Promise<any> {\n        return new Promise(resolve => setTimeout(resolve, time));\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}